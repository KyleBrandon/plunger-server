// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: jobs.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (
    id, created_at, updated_at, job_type, status, start_time, end_time, result, cancel_requested
) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, created_at, updated_at, job_type, status, start_time, end_time, result, cancel_requested
`

type CreateJobParams struct {
	ID              uuid.UUID
	CreatedAt       time.Time
	UpdatedAt       time.Time
	JobType         int32
	Status          int32
	StartTime       time.Time
	EndTime         time.Time
	Result          sql.NullString
	CancelRequested bool
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, createJob,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.JobType,
		arg.Status,
		arg.StartTime,
		arg.EndTime,
		arg.Result,
		arg.CancelRequested,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.JobType,
		&i.Status,
		&i.StartTime,
		&i.EndTime,
		&i.Result,
		&i.CancelRequested,
	)
	return i, err
}

const getCancelRequested = `-- name: GetCancelRequested :one
SELECT cancel_requested FROM jobs WHERE id = $1
`

func (q *Queries) GetCancelRequested(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, getCancelRequested, id)
	var cancel_requested bool
	err := row.Scan(&cancel_requested)
	return cancel_requested, err
}

const getJobById = `-- name: GetJobById :one
SELECT id, created_at, updated_at, job_type, status, start_time, end_time, result, cancel_requested FROM jobs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetJobById(ctx context.Context, id uuid.UUID) (Job, error) {
	row := q.db.QueryRowContext(ctx, getJobById, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.JobType,
		&i.Status,
		&i.StartTime,
		&i.EndTime,
		&i.Result,
		&i.CancelRequested,
	)
	return i, err
}

const getRunningJobsByType = `-- name: GetRunningJobsByType :many
SELECT id, created_at, updated_at, job_type, status, start_time, end_time, result, cancel_requested FROM jobs 
WHERE job_type = $1 AND status = 1
`

func (q *Queries) GetRunningJobsByType(ctx context.Context, jobType int32) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, getRunningJobsByType, jobType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.JobType,
			&i.Status,
			&i.StartTime,
			&i.EndTime,
			&i.Result,
			&i.CancelRequested,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCancelRequested = `-- name: UpdateCancelRequested :one
UPDATE jobs SET cancel_requested = $1 WHERE id = $2
RETURNING id, created_at, updated_at, job_type, status, start_time, end_time, result, cancel_requested
`

type UpdateCancelRequestedParams struct {
	CancelRequested bool
	ID              uuid.UUID
}

func (q *Queries) UpdateCancelRequested(ctx context.Context, arg UpdateCancelRequestedParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, updateCancelRequested, arg.CancelRequested, arg.ID)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.JobType,
		&i.Status,
		&i.StartTime,
		&i.EndTime,
		&i.Result,
		&i.CancelRequested,
	)
	return i, err
}

const updateJob = `-- name: UpdateJob :one
UPDATE jobs
SET status = $1, end_time = $2, result = $3, cancel_requested = $4
WHERE id = $5
RETURNING id, created_at, updated_at, job_type, status, start_time, end_time, result, cancel_requested
`

type UpdateJobParams struct {
	Status          int32
	EndTime         time.Time
	Result          sql.NullString
	CancelRequested bool
	ID              uuid.UUID
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, updateJob,
		arg.Status,
		arg.EndTime,
		arg.Result,
		arg.CancelRequested,
		arg.ID,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.JobType,
		&i.Status,
		&i.StartTime,
		&i.EndTime,
		&i.Result,
		&i.CancelRequested,
	)
	return i, err
}
