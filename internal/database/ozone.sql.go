// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ozone.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getLatestOzone = `-- name: GetLatestOzone :one
SELECT id, created_at, updated_at, start_time, end_time, running, expected_duration, status_message FROM ozone
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLatestOzone(ctx context.Context) (Ozone, error) {
	row := q.db.QueryRowContext(ctx, getLatestOzone)
	var i Ozone
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartTime,
		&i.EndTime,
		&i.Running,
		&i.ExpectedDuration,
		&i.StatusMessage,
	)
	return i, err
}

const startOzone = `-- name: StartOzone :one
INSERT INTO ozone (
    start_time, running, expected_duration
) VALUES ( $1, true, $2)
RETURNING id, created_at, updated_at, start_time, end_time, running, expected_duration, status_message
`

type StartOzoneParams struct {
	StartTime        sql.NullTime
	ExpectedDuration int32
}

func (q *Queries) StartOzone(ctx context.Context, arg StartOzoneParams) (Ozone, error) {
	row := q.db.QueryRowContext(ctx, startOzone, arg.StartTime, arg.ExpectedDuration)
	var i Ozone
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartTime,
		&i.EndTime,
		&i.Running,
		&i.ExpectedDuration,
		&i.StatusMessage,
	)
	return i, err
}

const stopOzone = `-- name: StopOzone :one
UPDATE ozone
SET end_time = CURRENT_TIMESTAMP, running = FALSE, cancel_requested = TRUE
WHERE id = $1
RETURNING id, created_at, updated_at, start_time, end_time, running, expected_duration, status_message
`

func (q *Queries) StopOzone(ctx context.Context, id uuid.UUID) (Ozone, error) {
	row := q.db.QueryRowContext(ctx, stopOzone, id)
	var i Ozone
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartTime,
		&i.EndTime,
		&i.Running,
		&i.ExpectedDuration,
		&i.StatusMessage,
	)
	return i, err
}

const updateOzoneStatus = `-- name: UpdateOzoneStatus :one
UPDATE ozone
SET status_message = $1
WHERE id = $2
RETURNING id, created_at, updated_at, start_time, end_time, running, expected_duration, status_message
`

type UpdateOzoneStatusParams struct {
	StatusMessage sql.NullString
	ID            uuid.UUID
}

func (q *Queries) UpdateOzoneStatus(ctx context.Context, arg UpdateOzoneStatusParams) (Ozone, error) {
	row := q.db.QueryRowContext(ctx, updateOzoneStatus, arg.StatusMessage, arg.ID)
	var i Ozone
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartTime,
		&i.EndTime,
		&i.Running,
		&i.ExpectedDuration,
		&i.StatusMessage,
	)
	return i, err
}
