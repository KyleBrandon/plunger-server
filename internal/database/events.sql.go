// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: events.sql

package database

import (
	"context"
	"encoding/json"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events(
    event_type, event_data
) VALUES ($1, $2)
RETURNING id, created_at, updated_at, event_type, event_data
`

type CreateEventParams struct {
	EventType int32
	EventData json.RawMessage
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent, arg.EventType, arg.EventData)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EventType,
		&i.EventData,
	)
	return i, err
}

const getEventsByType = `-- name: GetEventsByType :many
SELECT id, created_at, updated_at, event_type, event_data FROM events
WHERE event_type = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetEventsByTypeParams struct {
	EventType int32
	Limit     int32
}

func (q *Queries) GetEventsByType(ctx context.Context, arg GetEventsByTypeParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsByType, arg.EventType, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EventType,
			&i.EventData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestEventByType = `-- name: GetLatestEventByType :one
SELECT id, created_at, updated_at, event_type, event_data FROM events
WHERE event_type = $1 
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLatestEventByType(ctx context.Context, eventType int32) (Event, error) {
	row := q.db.QueryRowContext(ctx, getLatestEventByType, eventType)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EventType,
		&i.EventData,
	)
	return i, err
}
