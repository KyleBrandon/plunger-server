// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: filters.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const changeFilter = `-- name: ChangeFilter :one
INSERT INTO filters (changed_at, remind_at)
VALUES($1, $2)
RETURNING id, created_at, updated_at, changed_at, remind_at
`

type ChangeFilterParams struct {
	ChangedAt time.Time
	RemindAt  time.Time
}

func (q *Queries) ChangeFilter(ctx context.Context, arg ChangeFilterParams) (Filter, error) {
	row := q.db.QueryRowContext(ctx, changeFilter, arg.ChangedAt, arg.RemindAt)
	var i Filter
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChangedAt,
		&i.RemindAt,
	)
	return i, err
}

const getFilter = `-- name: GetFilter :one
SELECT id, created_at, updated_at, changed_at, remind_at FROM filters
WHERE id = $1
`

func (q *Queries) GetFilter(ctx context.Context, id uuid.UUID) (Filter, error) {
	row := q.db.QueryRowContext(ctx, getFilter, id)
	var i Filter
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChangedAt,
		&i.RemindAt,
	)
	return i, err
}

const getFilters = `-- name: GetFilters :many
SELECT id, created_at, updated_at, changed_at, remind_at FROM filters
ORDER BY created_at DESC
`

func (q *Queries) GetFilters(ctx context.Context) ([]Filter, error) {
	rows, err := q.db.QueryContext(ctx, getFilters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Filter
	for rows.Next() {
		var i Filter
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ChangedAt,
			&i.RemindAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
